/* 
  *  This software is the property of Moon's Information Technology Ltd.
  * 
  *  All rights reserved.
  * 
  *  The software is only to be used for development and research purposes.
  *  Commercial use is only permitted under license or agreement.
  * 
  *  Copyright (C)  Moon's Information Technology Ltd.
  *  
  *  Author: rupert@moonsit.co.uk
  * 
  * 
 */
package uk.co.moonsit.gui.controlpanel.core;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.DefaultListModel;
import javax.swing.JRadioButton;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import uk.co.moons.gui.controlpanel.helper.ControlPanelHelper;
import uk.co.moons.gui.controlpanel.helper.PlotPanelHelper;

//@SuppressWarnings("rawtypes")
/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//uk.co.moonsit.gui.controlpanel.core//PlotPanel//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "PlotPanelTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "uk.co.moonsit.gui.controlpanel.core.PlotPanelTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PlotPanelAction",
        preferredID = "PlotPanelTopComponent")
@Messages({
    "CTL_PlotPanelAction=PlotPanel",
    "CTL_PlotPanelTopComponent=PlotPanel Window",
    "HINT_PlotPanelTopComponent=This is a PlotPanel window"
})
public final class PlotPanelTopComponent extends TopComponent {
    
    static final Logger logger = Logger.getLogger(PlotPanelTopComponent.class.getName());
    private PlotPanelHelper plotPanelHelper = null;
    
    public PlotPanelTopComponent() {
        
        initComponents();
        setName(Bundle.CTL_PlotPanelTopComponent());
        setToolTipText(Bundle.HINT_PlotPanelTopComponent());
        
    }
    
    public PlotPanelTopComponent(ControlPanelHelper cph) {
        this.cph = cph;
        plotPanelHelper = new PlotPanelHelper();
        //configMap = new HashMap<>();
        initComponents();
        setName(Bundle.CTL_PlotPanelTopComponent());
        setToolTipText(Bundle.HINT_PlotPanelTopComponent());
    }
    
    public PlotPanelHelper getPlotPanelHelper() {
        if (plotPanelHelper == null) {
            plotPanelHelper = new PlotPanelHelper();
        }
        return plotPanelHelper;
    }
    
    public void setCph(ControlPanelHelper cph) {
        this.cph = cph;
    }
    
    public ControlPanelHelper getCph() {
        return cph;
    }
    
    public void addGraphButton(String index) {
        String ind = String.valueOf(index);
        JRadioButton button = new JRadioButton(ind);
        button.setActionCommand(ind);
        buttonGroupPlotNumber.add(button);
        jPanelRadio.add(button);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupPlotNumber = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListControllers = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListFunctions = new javax.swing.JList<>();
        jPanelRadio = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jButtonRemoveGraph = new javax.swing.JButton();
        jButtonClearData = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonAddGraph = new javax.swing.JButton();
        jPanelPlot = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 344));
        jPanel2.setLayout(new java.awt.GridLayout(0, 1));

        jListControllers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListControllersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListControllers);

        jPanel2.add(jScrollPane1);

        jListFunctions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFunctionsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListFunctions);

        jPanel2.add(jScrollPane2);

        jPanelRadio.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelRadio.setMaximumSize(new java.awt.Dimension(32767, 50));

        buttonGroupPlotNumber.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton1, org.openide.util.NbBundle.getMessage(PlotPanelTopComponent.class, "PlotPanelTopComponent.jRadioButton1.text")); // NOI18N
        jRadioButton1.setToolTipText(org.openide.util.NbBundle.getMessage(PlotPanelTopComponent.class, "PlotPanelTopComponent.jRadioButton1.toolTipText")); // NOI18N
        jRadioButton1.setActionCommand(org.openide.util.NbBundle.getMessage(PlotPanelTopComponent.class, "PlotPanelTopComponent.jRadioButton1.actionCommand")); // NOI18N
        jPanelRadio.add(jRadioButton1);

        jPanel2.add(jPanelRadio);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(jButtonRemoveGraph, org.openide.util.NbBundle.getMessage(PlotPanelTopComponent.class, "PlotPanelTopComponent.jButtonRemoveGraph.text")); // NOI18N
        jButtonRemoveGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveGraphActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonRemoveGraph);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonClearData, org.openide.util.NbBundle.getMessage(PlotPanelTopComponent.class, "PlotPanelTopComponent.jButtonClearData.text")); // NOI18N
        jButtonClearData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearDataActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonClearData);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonSave, org.openide.util.NbBundle.getMessage(PlotPanelTopComponent.class, "PlotPanelTopComponent.jButtonSave.text")); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonSave);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonAddGraph, org.openide.util.NbBundle.getMessage(PlotPanelTopComponent.class, "PlotPanelTopComponent.jButtonAddGraph.text")); // NOI18N
        jButtonAddGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddGraphActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonAddGraph);

        jPanel2.add(jPanel4);

        jPanel3.add(jPanel2, java.awt.BorderLayout.WEST);

        jPanelPlot.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelPlot.setPreferredSize(new java.awt.Dimension(600, 400));
        jPanelPlot.setLayout(new java.awt.GridLayout(0, 1));
        jPanel3.add(jPanelPlot, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jListControllersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListControllersValueChanged
        functionsListModel = new DefaultListModel<>();
        hmFunctions = new HashMap<>();
        
        Object[] selectedController = jListControllers.getSelectedValuesList().toArray();
        for (int i = 0; i < selectedController.length; i++) {
            String cont = (String) selectedController[i];
            currentController = cont;
            List<String> list = cph.getControllerFunctions(cont);
            for (String func : list) {
                functionsListModel.addElement(func);
                hmFunctions.put(func, cont);
            }
        }
        
        jListFunctions.setModel(functionsListModel);
    }//GEN-LAST:event_jListControllersValueChanged
    

    private void jListFunctionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFunctionsValueChanged
        
        logger.info("jListFunctionsValueChanged ");
        
        if (evt.getValueIsAdjusting() == false) {
            selectedFunctions = new ArrayList<>();
            Object[] values = jListFunctions.getSelectedValuesList().toArray();
            for (Object v : values) {
                String function = (String) v;
                selectedFunctions.add(function);
                String bm = buttonGroupPlotNumber.getSelection().getActionCommand();
                logger.info("+++ " + bm);
                cph.add2dDataSet(hmFunctions.get(function), function, Integer.parseInt(bm));
                addToConfig(bm, currentController + ":" + function);
            }
        }
    }//GEN-LAST:event_jListFunctionsValueChanged
    
    private void addToConfig(String num, String function) {
        plotPanelHelper.addToConfig(num, function);
    }

    private void jButtonRemoveGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveGraphActionPerformed
        
        plotPanelHelper.removeGraph();
        int index = buttonGroupPlotNumber.getButtonCount() - 1;
        int ctr = 0;
        Enumeration<AbstractButton> enb = buttonGroupPlotNumber.getElements();
        while (enb.hasMoreElements()) {
            AbstractButton b = enb.nextElement();
            if (index == ctr++) {
                buttonGroupPlotNumber.remove(b);
            }
        }
        plotPanelHelper.removeConfig( String.valueOf( index+1));
        jPanelRadio.remove(index);
        
        revalidate();
        repaint();
    }//GEN-LAST:event_jButtonRemoveGraphActionPerformed

    private void jButtonClearDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearDataActionPerformed
        
        plotPanelHelper.clear();
    }//GEN-LAST:event_jButtonClearDataActionPerformed

    private void jButtonAddGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddGraphActionPerformed

        //String bm = buttonGroupPlotNumber.getSelection().getActionCommand();
        //int index = Integer.parseInt(bm) + 1;
        int index = buttonGroupPlotNumber.getButtonCount() + 1;
        
        String ind = String.valueOf(index);
        JRadioButton button = new JRadioButton(ind);
        button.setActionCommand(ind);
        buttonGroupPlotNumber.add(button);
        jPanelRadio.add(button);
        plotPanelHelper.addGraph();
        revalidate();
        repaint();
    }//GEN-LAST:event_jButtonAddGraphActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        try {
            plotPanelHelper.saveConfig();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupPlotNumber;
    private javax.swing.JButton jButtonAddGraph;
    private javax.swing.JButton jButtonClearData;
    private javax.swing.JButton jButtonRemoveGraph;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JList<String> jListControllers;
    private javax.swing.JList<String> jListFunctions;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelPlot;
    private javax.swing.JPanel jPanelRadio;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel<String> functionsListModel = null;
    private HashMap<String, String> hmFunctions;
    private List<String> selectedFunctions = null;
    private ControlPanelHelper cph;
    private String currentController = null;
    //private HashMap<String, List<String>> configMap = null;

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }
    
    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
